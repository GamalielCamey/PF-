{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      enabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator(function* () {\n        var res = yield AccessibilityInfo.isScreenReaderEnabled();\n        handleSetEnabled(res);\n      });\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,OAAO,SAASC,sBAAT,GAAkC;EACvC,sBAA8BD,KAAK,CAACE,QAANF,CAAe,KAAfA,CAA9B;EAAA;EAAA,IAAOG,OAAP;EAAA,IAAgBC,UAAhB;;EACA,IAAMC,UAAU,GAAGL,KAAK,CAACM,MAANN,CAAa,KAAbA,CAAnB;;EAEA,IAAMO,gBAAgB,GAAIC,SAApBD,gBAAoBC,MAAD,EAAoB;IAC3C,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBL,UAAU,CAACI,KAAD,CAAVJ;IACD;EAHH;;EAMAJ,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpBK,UAAU,CAACI,OAAXJ,GAAqB,IAArBA;;IADoB,SAELM,eAFK;MAAA;IAAA;;IAAA;MAAA,qCAEpB,aAAiC;QAC/B,IAAMC,GAAG,SAASC,iBAAiB,CAACC,qBAAlBD,EAAlB;QACAN,gBAAgB,CAACK,GAAD,CAAhBL;MACD,CALmB;MAAA;IAAA;;IAOpB,IAAIQ,OAAY,GAAGF,iBAAiB,CAACG,gBAAlBH,CACjB,qBADiBA,EAEhBI,eAAD,EAAgB;MACdV,gBAAgB,CAACU,KAAD,CAAhBV;IAHe,EAAnB;IAOAI,eAAe;IACf,OAAO,YAAM;MACXN,UAAU,CAACI,OAAXJ,GAAqB,KAArBA;MACAQ,iBAAiB,CAACK,mBAAlBL,CAAsC,qBAAtCA,EAA6DE,OAA7DF;IAFF;EAfF;EAqBA,OAAOV,OAAP;AACD","names":["React","useScreenReaderEnabled","useState","enabled","setEnabled","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","AccessibilityInfo","isScreenReaderEnabled","handler","addEventListener","event","removeEventListener"],"sources":["useScreenReaderEnabled.ts"],"sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}