{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport CustomDatePicker from \"../../utils/CustomDatePicker/CustomDatePicker\";\nimport { useDispatch } from \"react-redux\";\nimport { getFlights } from \"../../Redux/Actions/flights\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchForm = function SearchForm() {\n  var dispatch = useDispatch();\n\n  var _useForm = useForm({\n    defaultValues: {\n      from: '',\n      to: '',\n      passengers: '',\n      depart: ''\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var onSubmit = function onSubmit(data) {\n    dispatch(getFlights(data));\n  };\n\n  return _jsxs(View, {\n    style: styles.inputContainer,\n    children: [_jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref) {\n        var _ref$field = _ref.field,\n            onChange = _ref$field.onChange,\n            onBlur = _ref$field.onBlur,\n            value = _ref$field.value;\n        return _jsx(TextInput, {\n          style: styles.input,\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value,\n          multiline: false\n        });\n      },\n      name: \"from\"\n    }), errors.from && _jsx(Text, {\n      children: \"from is required\"\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n            onChange = _ref2$field.onChange,\n            onBlur = _ref2$field.onBlur,\n            value = _ref2$field.value;\n        return _jsx(TextInput, {\n          style: styles.input,\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value,\n          multiline: false\n        });\n      },\n      name: \"to\"\n    }), errors.to && _jsx(Text, {\n      children: \"to is required.\"\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref3) {\n        var _ref3$field = _ref3.field,\n            onChange = _ref3$field.onChange,\n            onBlur = _ref3$field.onBlur,\n            value = _ref3$field.value;\n        return _jsx(TextInput, {\n          style: styles.input,\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value,\n          multiline: false\n        });\n      },\n      name: \"passengers\"\n    }), errors.passengers && _jsx(Text, {\n      children: \"passengers is required.\"\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref4) {\n        var _ref4$field = _ref4.field,\n            onChange = _ref4$field.onChange,\n            onBlur = _ref4$field.onBlur,\n            value = _ref4$field.value;\n        return _jsx(TextInput, {\n          style: styles.input,\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value,\n          multiline: false\n        });\n      },\n      name: \"depart\"\n    }), errors.depart && _jsx(Text, {\n      children: \"depart is required.\"\n    }), _jsx(Button, {\n      title: \"Submit\",\n      onPress: handleSubmit(onSubmit)\n    })]\n  });\n};\n\nexport default SearchForm;\n{}","map":{"version":3,"names":["React","useEffect","useState","useForm","Controller","CustomDatePicker","useDispatch","getFlights","styles","SearchForm","dispatch","defaultValues","from","to","passengers","depart","control","handleSubmit","errors","formState","onSubmit","data","inputContainer","required","field","onChange","onBlur","value","input"],"sources":["C:/PROGRAMACION/PF/PF-/srcFrontOne/src/components/SearchForm/SearchForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Text, View, TextInput, Button, Alert } from \"react-native\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport CustomDatePicker from \"../../utils/CustomDatePicker/CustomDatePicker\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {getFlights} from \"../../Redux/Actions/flights\"\r\nimport styles from \"./styles\";\r\n\r\n\r\nconst SearchForm = () => {\r\n  // const [connDatePicker, setConnDatePicker] = useState('')\r\nconst dispatch = useDispatch()\r\n\r\n\r\n  const { control, handleSubmit, formState: { errors } } = useForm({\r\n    defaultValues: {\r\n      from: '',\r\n      to: '',\r\n      passengers: '',\r\n      depart: ''\r\n    }\r\n  })\r\n\r\n  // const onChangeDate = (e, type) => {\r\n  //   setFormData({ ...formData, [type]: e.nativeEvent.text });\r\n  // };\r\n\r\n  const onSubmit = data => {\r\n    dispatch(getFlights(data))\r\n  }\r\n\r\n  // const onChange = arg => {\r\n  //   return {\r\n  //     value: arg.nativeEvent.text,\r\n  //   }\r\n  // }\r\n  // console.log('fsfssfsfsfsfs', a)\r\n  return (\r\n    <View style={styles.inputContainer} >\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <TextInput\r\n            style={styles.input}\r\n            onBlur={onBlur}\r\n            onChangeText={onChange}\r\n            value={value}\r\n            multiline={false}\r\n          />\r\n        )}\r\n        name='from'\r\n      />\r\n      {errors.from && <Text>from is required</Text>}\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <TextInput\r\n            style={styles.input}\r\n            onBlur={onBlur}\r\n            onChangeText={onChange}\r\n            value={value}\r\n            multiline={false}\r\n          />\r\n        )}\r\n        name='to'\r\n      />\r\n      {errors.to && <Text>to is required.</Text>}\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <TextInput\r\n            style={styles.input}\r\n            onBlur={onBlur}\r\n            onChangeText={onChange}\r\n            value={value}\r\n            multiline={false}\r\n          />\r\n        )}\r\n        name='passengers'\r\n      />\r\n      {errors.passengers && <Text>passengers is required.</Text>}\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <TextInput\r\n            style={styles.input}\r\n            onBlur={onBlur}\r\n            onChangeText={onChange}\r\n            value={value}\r\n            multiline={false}\r\n          />\r\n        )}\r\n        name='depart'\r\n      />\r\n      {errors.depart && <Text>depart is required.</Text>}\r\n\r\n      <Button title=\"Submit\" onPress={handleSubmit(onSubmit)} />\r\n    </View>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default SearchForm\r\n\r\n\r\n{/* <Controller\r\n        as={CustomDatePicker}\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onBlur, value } }) => (\r\n          <CustomDatePicker\r\n            toDatePicker={setConnDatePicker}\r\n            onChange={onChangeDate}\r\n            value={value}\r\n            onBlur={onBlur}\r\n            selected={value}\r\n          />\r\n        )}\r\n        name='depart'\r\n      /> */}\r\n\r\n\r\n      // const SearchForm = () => {\r\n      //   const [connDatePicker, setConnDatePicker] = useState('')\r\n      \r\n      //   const { control, handleSubmit, formState: { errors } } = useForm({\r\n      //     defaultValues: {\r\n      //       from: '',\r\n      //       to: '',\r\n      //       passengers: '',\r\n      //       depart: ''\r\n      //     }\r\n      //   })\r\n      \r\n      //   // const onChangeDate = (e, type) => {\r\n      //   //   setFormData({ ...formData, [type]: e.nativeEvent.text });\r\n      //   // };\r\n      \r\n      //   const onSubmit = data => console.log(data)\r\n      \r\n      //   // const onChange = arg => {\r\n      //   //   return {\r\n      //   //     value: arg.nativeEvent.text,\r\n      //   //   }\r\n      //   // }\r\n      //   // console.log('fsfssfsfsfsfs', a)\r\n      //   return (\r\n      //     <View style={styles.inputContainer} >\r\n      //       <Controller\r\n      //         control={control}\r\n      //         rules={{\r\n      //           required: true,\r\n      //         }}\r\n      //         render={({ field: { onChange, onBlur, value } }) => (\r\n      //           <TextInput\r\n      //             style={styles.input}\r\n      //             onBlur={onBlur}\r\n      //             onChangeText={onChange}\r\n      //             value={value}\r\n      //             multiline={false}\r\n      //           />\r\n      //         )}\r\n      //         name='from'\r\n      //       />\r\n      //       {errors.from && <Text>from is required</Text>}\r\n      //       <Controller\r\n      //         control={control}\r\n      //         rules={{\r\n      //           required: true,\r\n      //         }}\r\n      //         render={({ field: { onChange, onBlur, value } }) => (\r\n      //           <TextInput\r\n      //             style={styles.input}\r\n      //             onBlur={onBlur}\r\n      //             onChangeText={onChange}\r\n      //             value={value}\r\n      //             multiline={false}\r\n      //           />\r\n      //         )}\r\n      //         name='to'\r\n      //       />\r\n      //       {errors.to && <Text>to is required.</Text>}\r\n      //       <Controller\r\n      //         control={control}\r\n      //         rules={{\r\n      //           required: true,\r\n      //         }}\r\n      //         render={({ field: { onChange, onBlur, value } }) => (\r\n      //           <TextInput\r\n      //             style={styles.input}\r\n      //             onBlur={onBlur}\r\n      //             onChangeText={onChange}\r\n      //             value={value}\r\n      //             multiline={false}\r\n      //           />\r\n      //         )}\r\n      //         name='passengers'\r\n      //       />\r\n      //       {errors.passengers && <Text>passengers is required.</Text>}\r\n      //       <Controller\r\n      //         control={control}\r\n      //         rules={{\r\n      //           required: true,\r\n      //         }}\r\n      //         render={({ field: { onChange, onBlur, value } }) => (\r\n      //           <TextInput\r\n      //             style={styles.input}\r\n      //             onBlur={onBlur}\r\n      //             onChangeText={onChange}\r\n      //             value={value}\r\n      //             multiline={false}\r\n      //           />\r\n      //         )}\r\n      //         name='depart'\r\n      //       />\r\n      //       {errors.depart && <Text>depart is required.</Text>}\r\n      \r\n      //       <Button title=\"Submit\" onPress={handleSubmit(onSubmit)} />\r\n      //     </View>\r\n      //   )\r\n      // }\r\n      "],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAEA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,gBAAP;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,UAAR;AACA,OAAOC,MAAP;;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;EAEzB,IAAMC,QAAQ,GAAGJ,WAAW,EAA5B;;EAGE,eAAyDH,OAAO,CAAC;IAC/DQ,aAAa,EAAE;MACbC,IAAI,EAAE,EADO;MAEbC,EAAE,EAAE,EAFS;MAGbC,UAAU,EAAE,EAHC;MAIbC,MAAM,EAAE;IAJK;EADgD,CAAD,CAAhE;EAAA,IAAQC,OAAR,YAAQA,OAAR;EAAA,IAAiBC,YAAjB,YAAiBA,YAAjB;EAAA,IAA4CC,MAA5C,YAA+BC,SAA/B,CAA4CD,MAA5C;;EAaA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAC,IAAI,EAAI;IACvBX,QAAQ,CAACH,UAAU,CAACc,IAAD,CAAX,CAAR;EACD,CAFD;;EAUA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEb,MAAM,CAACc,cAApB;IAAA,WACE,KAAC,UAAD;MACE,OAAO,EAAEN,OADX;MAEE,KAAK,EAAE;QACLO,QAAQ,EAAE;MADL,CAFT;MAKE,MAAM,EAAE;QAAA,sBAAGC,KAAH;QAAA,IAAYC,QAAZ,cAAYA,QAAZ;QAAA,IAAsBC,MAAtB,cAAsBA,MAAtB;QAAA,IAA8BC,KAA9B,cAA8BA,KAA9B;QAAA,OACN,KAAC,SAAD;UACE,KAAK,EAAEnB,MAAM,CAACoB,KADhB;UAEE,MAAM,EAAEF,MAFV;UAGE,YAAY,EAAED,QAHhB;UAIE,KAAK,EAAEE,KAJT;UAKE,SAAS,EAAE;QALb,EADM;MAAA,CALV;MAcE,IAAI,EAAC;IAdP,EADF,EAiBGT,MAAM,CAACN,IAAP,IAAe,KAAC,IAAD;MAAA;IAAA,EAjBlB,EAkBE,KAAC,UAAD;MACE,OAAO,EAAEI,OADX;MAEE,KAAK,EAAE;QACLO,QAAQ,EAAE;MADL,CAFT;MAKE,MAAM,EAAE;QAAA,wBAAGC,KAAH;QAAA,IAAYC,QAAZ,eAAYA,QAAZ;QAAA,IAAsBC,MAAtB,eAAsBA,MAAtB;QAAA,IAA8BC,KAA9B,eAA8BA,KAA9B;QAAA,OACN,KAAC,SAAD;UACE,KAAK,EAAEnB,MAAM,CAACoB,KADhB;UAEE,MAAM,EAAEF,MAFV;UAGE,YAAY,EAAED,QAHhB;UAIE,KAAK,EAAEE,KAJT;UAKE,SAAS,EAAE;QALb,EADM;MAAA,CALV;MAcE,IAAI,EAAC;IAdP,EAlBF,EAkCGT,MAAM,CAACL,EAAP,IAAa,KAAC,IAAD;MAAA;IAAA,EAlChB,EAmCE,KAAC,UAAD;MACE,OAAO,EAAEG,OADX;MAEE,KAAK,EAAE;QACLO,QAAQ,EAAE;MADL,CAFT;MAKE,MAAM,EAAE;QAAA,wBAAGC,KAAH;QAAA,IAAYC,QAAZ,eAAYA,QAAZ;QAAA,IAAsBC,MAAtB,eAAsBA,MAAtB;QAAA,IAA8BC,KAA9B,eAA8BA,KAA9B;QAAA,OACN,KAAC,SAAD;UACE,KAAK,EAAEnB,MAAM,CAACoB,KADhB;UAEE,MAAM,EAAEF,MAFV;UAGE,YAAY,EAAED,QAHhB;UAIE,KAAK,EAAEE,KAJT;UAKE,SAAS,EAAE;QALb,EADM;MAAA,CALV;MAcE,IAAI,EAAC;IAdP,EAnCF,EAmDGT,MAAM,CAACJ,UAAP,IAAqB,KAAC,IAAD;MAAA;IAAA,EAnDxB,EAoDE,KAAC,UAAD;MACE,OAAO,EAAEE,OADX;MAEE,KAAK,EAAE;QACLO,QAAQ,EAAE;MADL,CAFT;MAKE,MAAM,EAAE;QAAA,wBAAGC,KAAH;QAAA,IAAYC,QAAZ,eAAYA,QAAZ;QAAA,IAAsBC,MAAtB,eAAsBA,MAAtB;QAAA,IAA8BC,KAA9B,eAA8BA,KAA9B;QAAA,OACN,KAAC,SAAD;UACE,KAAK,EAAEnB,MAAM,CAACoB,KADhB;UAEE,MAAM,EAAEF,MAFV;UAGE,YAAY,EAAED,QAHhB;UAIE,KAAK,EAAEE,KAJT;UAKE,SAAS,EAAE;QALb,EADM;MAAA,CALV;MAcE,IAAI,EAAC;IAdP,EApDF,EAoEGT,MAAM,CAACH,MAAP,IAAiB,KAAC,IAAD;MAAA;IAAA,EApEpB,EAsEE,KAAC,MAAD;MAAQ,KAAK,EAAC,QAAd;MAAuB,OAAO,EAAEE,YAAY,CAACG,QAAD;IAA5C,EAtEF;EAAA,EADF;AA0ED,CAtGD;;AA0GA,eAAeX,UAAf;AAGA,CAgBY"},"metadata":{},"sourceType":"module"}